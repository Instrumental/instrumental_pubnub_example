#!/usr/bin/env ruby

require 'instrumental/pub_nub/relay'
require 'logger'
require 'optparse'
require 'socket'

pubnub_subscribe = nil
pubnub_channel   = nil
instrumental_key = nil
log_level        = 'warn'
log_levels       = %w{debug warn info fatal}
key_prefix       = Socket.gethostname

OptionParser.new do |opts|
  opts.on("-k", "--pubnub-subscribe-key KEY", "Your PubNub subscribe key") do |k|
    pubnub_subscribe = k
  end
  opts.on("-c", "--pubnub-channel CHANNEL", "Your PubNub channel") do |c|
    pubnub_channel = c
  end
  opts.on("-i", "--instrumental-api-key API_KEY", "Your Instrumental API key") do |i|
    instrumental_key = i
  end
  opts.on("-p", "--key-prefix PREFIX", "String to prefix all received metrics with (default: #{key_prefix})") do |p|
    key_prefix = p
  end
  opts.on("-l", "--log-level LEVEL", log_levels, "Log level for output, valid values are: #{log_levels.inspect}") do |l|
    log_level = l
  end
  opts.on("-v", "--version", "Print version and exit") do
    require 'instrumental/pub_nub/version'
    puts "Instrumental Pubnub Example: #{Instrumental::PubNub::VERSION}"
    exit 0
  end
end.parse!

if pubnub_subscribe.to_s.strip.empty?
  raise "You must provide a PubNub subscribe key"
end

if pubnub_channel.to_s.strip.empty?
  raise "You must provide a PubNub channel name"
end

if instrumental_key.to_s.strip.empty?
  raise "You must provide an Instrumental API key"
end

if key_prefix.to_s.strip.empty?
  raise "You must provide a non-empty key prefix"
end

logger       = Logger.new(STDOUT)
logger.level = Logger.const_get(log_level.upcase)
relay        = Instrumental::PubNub::Relay.new(pubnub_subscribe,
                                                pubnub_channel,
                                                instrumental_key,
                                                key_prefix,
                                                logger)

trap('INT') do
  relay.disconnect!
end

relay.run!
